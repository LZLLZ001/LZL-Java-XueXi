/*
面向过程(写函数)：当需要实现一个功能的时候，每一个具体的步骤自己写，详细处理每一个细节。
面向对象(调用函数)：当需要实现一个功能的时候，不关心具体的步骤，而是找一个已经具有该功能的人，来帮我做事儿。

面向对象三大基本特征：即封装、继承和多态

类与对象：
    类：类是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。
                属性：该事物的状态信息。
                行为：该事物能够做什么。
    对象：是一类事物的具体体现。对象是类的一个实例（对象并不是找个女朋友），必然具备该类事物的属性和行为。

    类是对一类事物的描述，是抽象的。
    对象是一类事物的实例，是具体的。
    类是对象的模板，对象是类的实体。

类的定义：
    public class ClassName {
    成员变量(属性)：
        int ...

    成员方法(行为)：
        public void ...
    }

    注意事项：
    1. 成员变量是直接定义在类当中的，在方法外边。
    

局部变量和成员变量

    1. 定义的位置不一样【重点】
    局部变量：在方法的内部
    成员变量：在方法的外部，直接写在类当中

    2. 作用范围不一样【重点】
    局部变量：只有方法当中才可以使用变量：整个类全都可以通用。

    3. 默认值不一样【重点】
    局部变量：没有默认值，如果要想使用，必须手动进行赋值
    成员变量：如果没有赋值，会有默认值，规则和数组一样

    4. 内存的位置不一样（了解）
    局部变量：位于栈内存
    成员变量：位于堆内存

    5. 生命周期不一样（了解）
    局部变量：随着方法进栈而诞生，随着方法出栈而消失
    成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失

类的使用：
    通常情况下，一个类并不能直接使用，需要根据类创建一个对象，才能使用。

    1. 导包：也就是指出需要使用的类，在什么位置。
        import 包名称.类名称;
        import cn.itcast.day06.demo01.Student;
        对于和当前类属于同一个包的情况，可以省略导包语句不写。

    2. 创建对象格式：
        类名称 对象名 = new 类名称();
        Student stu = new Student();   //对象名一般为前几个字母，类名长时为各个大写字母的小写

    3. 使用，分为两种情况：
        使用成员变量：对象名.成员变量名
        使用成员方法：对象名.成员方法名(参数)
        （也就是，想用谁，就用对象名点儿谁。）

    注意事项：
    如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。



类作为方法参数：
    public static void fun(类名称 对象名)
    fun(对象名)  //传进去的是地址值

类作为方法返回值：、
    public static 类名称 fun(){
        类名称 对象名 = new 类名称();
        ...     //具体操作
        return 对象名；    //返回的是地址值
    }
    类名称 对象名=fun();

类作为成员变量：
    private 类名 对象名; //类在其他地方定义



对象数组：
    类名称[] 对象数组名 = new 类名称[数组长度];
            Person[] array = new Person[3];
    数组缺点：一旦创建，程序运行期间长度不可以发生改变。



匿名对象：只有右边的对象，没有左边的名字和赋值运算符。
    new 类名称();

    注意事项：匿名对象只能使用唯一的一次，下次再用不得不再创建一个新对象。
    使用建议：如果确定有一个对象只需要使用唯一的一次，就可以用匿名对象。
            比如只需要输入一次数字：int num = new Scanner(System.in).nextInt();
    匿名对象也可以作为传参与返回值：(因为匿名对象也是一个对象)
              fun1(new Scanner(System.in));   //传参
              public static Scanner fun2() {return new Scanner(System.in);}   //返回值
*/



public class 类与对象 {
    String name; // 成员变量

    public void methodA() {
        int num = 20; // 局部变量
        System.out.println(num);
        System.out.println(name);
    }

    public void methodB(int param) { // 方法的参数就是局部变量
        // 参数在方法调用的时候，必然会被赋值的。
        System.out.println(param);

        int age; // 局部变量
//        System.out.println(age); // 没赋值不能用

//        System.out.println(num); // 错误写法！
        System.out.println(name);
    }
}
