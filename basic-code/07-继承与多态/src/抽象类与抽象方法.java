/*

当不确定如何进行{}中的实现时，那么就应该用抽象
抽象方法：加上abstract关键字，然后去掉大括号，直接分号结束。
     public abstract void 抽象方法名()；
抽象类：抽象方法所在的类，必须是抽象类。在class之前写上abstract即可。
    public abstract class 抽象类名 {
        public abstract void 抽象方法名();
    }


使用抽象类和抽象方法：
    1. 必须用一个实现子类来继承抽象父类。不能直接创建new抽象类对象。
    2. 子类必须覆盖重写抽象父类当中所有的抽象方法。覆盖重写：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。
    3. 创建子类对象进行使用。
        public class 实现子类名 extends 抽象类名 {
            @Override
            public void 抽象方法名() {
               具体操作;
            }
        }

        子类名 子类对象 = new 子类名();

注意事项：
    1.抽象类不能创建对象。
    2.抽象类不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
    3.抽象类的实体(普通)子类必须重写抽象父类中所有的抽象方法，抽象类的抽象子类则不用
        (抽象子类可以重写部分，但是最终实现类必须补全没重写的的方法)。


 */


public class 抽象类与抽象方法 {
}
