/*
线性查找：遍历逐个对比


二分查找：先排序变为有序数组
    确定该数组的中间的下标mid = (left + right) / 2；
    然后让需要查找的数和 arr[mid] 比较；
    小于递归的向左查找则，大于则递归的向右查找；
    找到或者递归完整个数组(left > right)就结束递归


插值查找：先排序变为有序数组
    类似于二分查找，不同的是插值查找每次从自适应mid处开始查找：
    int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])

    对于数据量较大，关键字(数字)分布比较均匀的查找表来说，采用插值查找, 速度较快.
    关键字分布不均匀的情况下，该方法不一定比二分查找要好



斐波那契(黄金分割法)查找：先排序变为有序数组
    黄金分割点是指把一条线段分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。
    取其前三位数字的近似值是0.618。由于按此比例设计的造型十分美丽，
    因此称为黄金分割，也称为中外比。这是一个神奇的数字，会带来意向不大的效果。

    斐波那契数列 {1, 1, 2, 3, 5, 8, 13, 21, 34, 55 }
    发现斐波那契数列的两个相邻数的比例，无限接近 黄金分割值0.618
    	public static int[] fib() {
            int[] f = new int[maxSize];
            f[0] = 1;
            f[1] = 1;
            for (int i = 2; i < maxSize; i++) {
                f[i] = f[i - 1] + f[i - 2];
            }
            return f;
        }


    原理与前两种相似，仅仅改变了中间结点（mid）的位置，
    mid不再是中间或插值得到，而是位于黄金分割点附近，
    即mid=low+F(k-1)-1（F代表斐波那契数列）

    对F(k-1)-1的理解：
        1） 由斐波那契数列 F[k]=F[k-1]+F[k-2] 的性质，
            可以得到 （F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1 。
            该式说明：只要顺序表的长度为F[k]-1，则可以将该表分成长度为F[k-1]-1和F[k-2]-1的两段，
            即如图所示。从而中间位置为mid=low+F(k-1)-1

        2）类似的，每一子段也可以用相同的方式分割。
           但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1(用最大数字进行填充)。
           这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，
           新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。
               while(n>fib(k)-1)
                k++



*/


public class 查找算法 {
}
