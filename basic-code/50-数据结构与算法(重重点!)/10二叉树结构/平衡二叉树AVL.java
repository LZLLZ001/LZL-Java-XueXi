/*
存在问题：
    二叉排序树当左右子树数量差距较大时，插入速度没有影响，
    但查询速度明显降低(因为需要依次比较), 不能发挥二叉排序树的优势，
    因为每次还需要比较空的左右子树，其查询速度比单链表还慢。


平衡二叉树(AVL树)
    又叫平衡二叉排序树，是对二叉排序树的优化。可以保证查询效率较高。

    特点：
        1）首先满足二叉排序树的要求，其次它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，
            并且左右两个子树都是一棵平衡二叉树。
        2）平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。


平衡二叉树创建：
    在转化为二叉排序树的过程中，每次添加完节点后进行判断，
    当根节点的左右子树高度差绝对值超过1时，加入左右旋转的操作。

    规则：
        当符合左旋转的条件时[（右高-左高）>1],
        如果它右子树的左子树高度大于它右子树的右子树的高度，
        先对当前这个结点的右节点进行左旋转，再当前结点进行左旋转的操作;
        否者直接进行左旋转。

        当符合右旋转的条件时[（左高-右高）>1],
        如果它左子树的右子树高度大于它左子树的左子树的高度，
        先对当前这个结点的左节点进行左旋转，再当前结点进行右旋转的操作;
        否者直接进行右旋转。


左旋转：右子树比左子树高1以上:（右高-左高）>1，降低右子树高度
    将A节点的右节点的左节点，指向A节点；
    将A节点的右节点，指向A节点的右节点的左节点。
        1）创建新的结点，以当前A结点的值
        2）把新的结点的左子树设置成当前A结点的左子树
        3）把新的结点的右子树设置成当前A结点的右子树的左子树
        4）把当前A结点的值替换成右子结点的值
        5）把当前A结点的右子树设置成当前结点右子树的右子树
        6）把当前A结点的左子树(左子结点)设置成新的结点
        注意：会有一个空余节点因为没有被指向而被系统回收

右旋转：
    将A节点的左节点的右节点，指向A节点；
    将A节点的左节点，指向A节点的左节点的右节点。
        1）创建新的结点，以当前A结点的值
        2）把新的结点的右子树设置成当前A结点的右子树
        3）把新的结点的左子树设置成当前A结点的左子树的又子树
        4）把当前A结点的值替换成左子结点的值
        5）把当前A结点的左子树设置成当前结点左子树的左子树
        6）把当前A结点的右子树(右子结点)设置成新的结点









*/




public class 平衡二叉树AVL {
}
