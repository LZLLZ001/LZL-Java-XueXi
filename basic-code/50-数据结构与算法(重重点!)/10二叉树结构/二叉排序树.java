/*
二叉排序树：
    对于任何一个非叶子节点，要求左子节点<=当前节点<=右子节点

创建：
    判断传入结点的值，和当前子树的根结点的值关系，
    当小于时，左子结点为null则直接添加到此位置，不为空则递归的向左子树继续判断；
    大于是操作一样。



删除节点：
    找到删除节点，判断节点情况：
    1）删除叶子节点：找到删除节点的父节点，然后删除节点;若无父节点说明只剩一个节点，直接删除。
    2）删除只有一颗子树的节点：找到删除节点的父节点，将其子树接入到删除节点的位置上;
                            若没有父节点说明删除节点是根节点，将根节点变更为其子节点。
    3）删除节点有两颗子树：找到删除节点的父节点，从删除节点的右子树找到最小的结点，
                         将其数值保存在临时变量中后删除此右子树最小的结点，然后将保存的值赋值给删除节点;
                         或者删除节点的左子树找到最大的结点进行同样的处理。















*/

public class 二叉排序树 {
}
