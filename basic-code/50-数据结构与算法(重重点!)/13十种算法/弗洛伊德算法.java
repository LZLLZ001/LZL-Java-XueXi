/*
弗洛伊德算法：
    求加权图中各个顶点之间的最短路径。

    区别：迪杰斯特拉算法用于计算图中某一个顶点到其他顶点的最短路径，
         不过也可以通过遍历求出所有节点。

思想：
    设置顶点vi到顶点vk的最短路径已知为Lik，顶点vk到vj的最短路径已知为Lkj，
    顶点vi到vj的路径为Lij，则vi到vj的最短路径为：min((Lik+Lkj),Lij)，
    vk的取值为图中所有顶点，则可获得vi到vj的最短路径；
    至于vi到vk的最短路径Lik或者vk到vj的最短路径Lkj，是以同样的方式获得。

算法：
    1）建立前驱关系表与节点距离表，
    2）每一轮将一个点作为中间顶点的所有情况都进行遍历(即中间定点不变，出发点与终点遍历所有点)，
       更新两个表；
    3）每个节点都轮做中间节点完后得出结果。


前驱矩阵关系表：能根据前驱关系一步一步推出对应的最短路径。

时间复杂度：3层for循环，O(n^3)






*/

public class 弗洛伊德算法 {
}
