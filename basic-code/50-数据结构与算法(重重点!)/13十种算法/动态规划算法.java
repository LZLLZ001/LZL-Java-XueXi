/*
动态规划算法：
    将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法；
    通过填表的方式来逐步推进，得到最优解。

与分治算法的区别：
    适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。
    即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解。


背包问题：
    一个给定容量的背包、若干具有一定价值和重量的物品，如何选择物品放入背包使物品的价值最大。
    其中又分01背包和完全背包(完全背包指的是：每种物品都有无限件可用)


01背包：
    对物品i进行遍历，对于给定的n个物品，v[i]、w[i]分别为第i个物品的价值和重量，
    C为背包的容量，v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。
      (1)  v[i][0]=v[0][j]=0; //表示填入表第一行和第一列是0
      (2)  当w[i]>j时：v[i][j]=v[i-1][j]   //当准备加入新增的商品的容量大于 当前背包的容量时，
                                             就直接使用上一个单元格的装入策略
      (3)  当j>=w[i]时：v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]}  
            //当准备加入的新增的商品的容量小于等于当前背包的容量,
                v[i-1][j]： 就是上一个单元格的装入的最大值
                v[i] : 表示当前商品的价值
                v[i-1][j-w[i]] ： 装入i-1商品，到剩余空间j-w[i]的最大值




*/

public class 动态规划算法 {
}
