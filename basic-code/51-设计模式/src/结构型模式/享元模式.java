/*
享元模式(共享对象模式)
    当系统中有大量相似对象时，运用共享技术有效地支持大量细粒度的对象，解决重复对象的内存浪费的问题。

    享元模式是池技术的重要实现方式， String常量池、数据库连接池、缓冲池等等都是享元模式的应用，
    不需要总是创建新对象，可以从缓冲池里拿。

    用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，一般用HashMap/HashTable存储

实现：
    1) FlyWeightFactary 享元工厂类，用于构建一个池容器(集合)，同时提供从池获取对象的方法。
    2) FlyWeight 是抽象的享元角色, 他是产品的抽象类, 同时定义出对象的外部状态和内部状态的接口或实现。
    3) ConcreteFlyWeight 是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。
    4) UnsharedConcreteFlyWeight 是不可共享的角色。



将对象的信息分为两个部分： 内部状态和外部状态，并且需要有一个工厂类加以控制。
    1) 内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变 (如五子棋颜色)
    2) 外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态 (如五子棋位置)


JDK-Interger应用了享元模式：
    在 valueOf 方法中， 先判断值是否在 IntegerCache 中， 如果不在， 就创建新的 Integer(new),
    否则， 就直接从 缓存池返回。





*/


package 结构型模式;

public class 享元模式 {
}
