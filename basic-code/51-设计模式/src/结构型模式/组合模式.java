/*

组合模式
    又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。
    使得用户对单个对象和组合对象的访问具有一致性， 即：组合能让客户以一致的方式处理个别对象以及组合对象，只需要搞清楚谁包含谁。
    方法：通过list聚合方式层层聚合。

    具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动.

    方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构。

    需要遍历组织机构，或者处理的对象具有树形结构时, 非常适合使用组合模式；
    要求较高的抽象性， 如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样， 不适合使用组合模式。


    Component: 这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为,
                用于访问和管理Component 子部件, Component 可以是抽象类或者接口.
    Composite: 非叶子节点，用于存储子部件，在Component中实现子部件的相关操作，可以操作叶子节点
    Leaf: 叶子节点，无子节点


Java的集合类-HashMap使用了组合模式




*/


package 结构型模式;

public class 组合模式 {
}
