/*
状态模式：
    它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。
    状态和行为是一一对应的，状态之间可以相互转换
    当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类


好处：
    通常通过if/else判断状态，从而实现不同的逻辑，这类代码难以应对变化，
    在添加一种状态时，我们需要手动添加if/else，在添加一种功能时，
    要对所有的状态进行判断。因此代码会变得越来越臃肿，并且一旦没有处理某个状态，
    便会发生极其严重的BUG，难以维护


实现：
    1) Context类为环境角色, 用于维护State实例,这个实例定义当前状态
    2) State抽象状态角色,定义一个接口封装与Context 的一个特点接口相关行为
    3) ConcreteState具体的状态角色，每个子类实现一个与Context 的一个状态相关行为


1) 代码有很强的可读性、方便维护。状态模式将每个状态的行为封装到对应的一个类中
3) 符合“开闭原则”。容易增删状态。
4) 会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多类，加大维护难度
5) 应用场景：当一个事件或者对象有很多种状态，状态之间会相互转换，对不同的状
    态要求有不同的行为的时候，可以考虑使用状态模式


*/



package 行为型模式;

public class 状态模式 {
}
