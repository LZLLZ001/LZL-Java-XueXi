/*
命名模式：
    将请求发送者与请求接收者分开，消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。
    会将一个请求封装为一个对象， 以便使用不同参数来表示不同的请求(即命名)，同时命令模式也支持可撤销的操作。

实现：通过Command和ConcreteCommand将Invoker和Receiver解耦
    1) Invoker：调用者
    2) Command: 命令，需要执行的所有命令都在这里，可以是接口或抽象类
    3) ConcreteCommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作
    4) Receiver: 接受者，知道如何实施和执行一个请求相关的操作


1) 将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要
    调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对
    象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作， 也就是说： ”
    请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到
    了纽带桥梁的作用。
2) 容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令
3) 容易实现对请求的撤销和重做
4) 命令模式不足：可能导致某些系统有过多的具体命令类， 增加了系统的复杂度， 这
    点在在使用的时候要注意
5) 空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没
    有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦。
6) 命令模式经典的应用场景：界面的一个按钮都是一条命令、 模拟CMD（DOS命令）
    订单的撤销/恢复、触发-反馈机制





命令模式在Spring框架JdbcTemplate应用






*/



package 行为型模式;

public class 命令模式 {
}
