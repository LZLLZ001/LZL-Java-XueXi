package 创建型模式;/*
原型模式：
    1) 用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。
    2) 原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节
    3) 工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，
                    即 对象.clone()
    4) 形象的理解：孙大圣拔出猴毛，变出其它孙大圣.

实现：
    Object类提供了一个clone()方法，该方法可以将一个Java对象复制一份，
    让Java类必须实现Cloneable接口，重写clone()方法。该接口表示该类能够复制且具有复制的能力。


浅拷贝：默认的 clone()方法
    1) 对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。
    2) 对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，
       也就是只是将该成员变量的引用值（内 存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。
       在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成变量值。


深拷贝
    1) 复制对象的所有基本数据类型的成员变量值
    2) 为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，
       直到该对象可达的所有对象。也就是说，对象进行深拷贝要对 整个对象进行拷贝
    3) 深拷贝实现方式1：重写clone方法，先浅拷贝基本类型，再调用引用数据类型的clone(引用数据类型本身进行浅拷贝)；
    4) 深拷贝实现方式2：通过对象序列化实现深拷贝(推荐)，具体见代码。


缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了ocp原则.





Spring中原型bean的创建


*/

public class 原型模式 {
}
