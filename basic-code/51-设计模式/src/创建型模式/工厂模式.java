package 创建型模式;/*

工厂模式的意义：
    将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性
    自己的理解：
        不使用工厂模式时，10个商店需要分别实现了10个类，并且当修改代码时要分别修改这10个类；
        使用工厂模式时由于封装了实例化对象的行为，因此10个商店都只是调用工厂对象的一个方法来创建对象使用，
        并不需要实现这个类，并且修改代码时只需要修改工厂类这一个地方。


简单工厂模式：
    定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)
    JDK 中的Calendar类

工厂方法模式：
    定义了一个创建对象的抽象类，定义了一个创建对象的抽象方法，由子类决定要实例化的类，将对象的实例化推迟到子类。
    自己的理解：
        绝大部分实例化中重复的操作都在工厂抽象类中，差异处提供一个抽象方法由子类按不同情况对应重写。
        同样修改重复性操作时，只需修改工厂类。

抽象工厂模式：
    定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类。
    是对简单工厂模式的改进(或者称为进一步的抽象)：将工厂抽象成两层， AbsFactory(抽象工厂) 和 具体实现的工厂子类，
    可以根据创建对象类型使用对应的工厂子类。 这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展。






*/


public class 工厂模式 {
}
